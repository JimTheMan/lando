var N = null;var searchIndex = {};
searchIndex["lando"]={"doc":"Lando provides building blocks for serverless HTTP Rust applications deployable on AWS Lambda.","items":[[3,"LambdaContext","lando","Provides a view into the `context` object available to Lambda functions.",N,N],[3,"Response","","Represents an HTTP response",N,N],[3,"StrMap","","A read-only view into a map of string data",N,N],[4,"Body","","Representation of http request and response bodies as supported by API Gateway.",N,N],[13,"Empty","","An empty body",0,N],[13,"Text","","A body containing string data",0,N],[13,"Binary","","A body containing binary data",0,N],[4,"PayloadError","","Payload deserialization errors",N,N],[13,"Json","","Returned when `application/json` bodies fail to deserialize a payload",1,N],[13,"WwwFormUrlEncoded","","Returned when `application/x-www-form-urlencoded` bodies fail to deserialize a payload",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["body"]],["bool"]]],[11,"ne","","",0,[[["self"],["body"]],["bool"]]],[11,"default","","",0,[[],["self"]]],[11,"from","","",0,N],[11,"from","","",0,[[["str"]],["self"]]],[11,"from","","",0,[[["string"]],["self"]]],[11,"from","","",0,[[["cow",["str"]]],["body"]]],[11,"from","","",0,[[["cow"]],["body"]]],[11,"from","","",0,[[["vec",["u8"]]],["self"]]],[11,"from","","",0,N],[11,"deref","","",0,N],[11,"as_ref","","",0,N],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"request","","API Gateway request types. Typically these are exposed via the `request_context` method provided by lando::RequestExt",N,N],[3,"RequestContext","lando::request","API Gateway request context",N,N],[12,"account_id","","",2,N],[12,"resource_id","","",2,N],[12,"stage","","",2,N],[12,"request_id","","",2,N],[12,"resource_path","","",2,N],[12,"http_method","","",2,N],[12,"authorizer","","",2,N],[12,"api_id","","",2,N],[12,"identity","","",2,N],[3,"Identity","","Identity assoicated with request",N,N],[12,"source_ip","","",3,N],[12,"cognito_identity_id","","",3,N],[12,"cognito_identity_pool_id","","",3,N],[12,"cognito_authentication_provider","","",3,N],[12,"cognito_authentication_type","","",3,N],[12,"account_id","","",3,N],[12,"caller","","",3,N],[12,"api_key","","",3,N],[12,"user","","",3,N],[12,"user_agent","","",3,N],[12,"user_arn","","",3,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"default","","",2,[[],["requestcontext"]]],[11,"clone","","",2,[[["self"]],["requestcontext"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"default","","",3,[[],["identity"]]],[11,"clone","","",3,[[["self"]],["identity"]]],[11,"default","lando","",4,[[],["strmap"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["strmap"]],["bool"]]],[11,"ne","","",4,[[["self"],["strmap"]],["bool"]]],[11,"get","","Return a named value where available",4,[[["self"],["str"]],["option",["str"]]]],[11,"is_empty","","Return true if the underlying map is empty",4,[[["self"]],["bool"]]],[11,"iter","","Return an iterator over keys and values",4,[[["self"]],["strmapiter"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"from","","",4,[[["hashmap",["string","string"]]],["self"]]],[11,"deserialize","","",4,[[["d"]],["result",["strmap"]]]],[6,"Request","","A re-exported version of `http::Request` with a type parameter for body fixed to type lando::Body",N,N],[6,"Result","","Result type for gateway functions",N,N],[8,"RequestExt","","Extentions for `lando::Request` structs that provide access to API gateway features",N,N],[10,"query_string_parameters","","Return pre-parsed http query string parameters, parameters provided after the `?` portion of a url, associated with the API gateway request. No query parameters will yield an empty `StrMap`.",5,[[["self"]],["strmap"]]],[10,"path_parameters","","Return pre-extracted path parameters, parameter provided in url placeholders `/foo/{bar}/baz/{boom}`, associated with the API gateway request. No path parameters will yield an empty `StrMap`",5,[[["self"]],["strmap"]]],[10,"stage_variables","","Return stage variables associated with the API gateway request. No stage parameters will yield an empty `StrMap`",5,[[["self"]],["strmap"]]],[10,"request_context","","Return request context data assocaited with the API gateway request",5,[[["self"]],["requestcontext"]]],[10,"payload","","Return the Result of a payload parsed into a serde Deserializeable type",5,[[["self"]],["result",["option","payloaderror"]]]],[8,"IntoResponse","","A conversion of self into a `Response`",N,N],[10,"into_response","","Return a translation of `self` into `Response<Body>`",6,[[["self"]],["response",["body"]]]],[11,"into_response","","",7,[[["self"]],["response",["body"]]]],[14,"gateway","","A macro that exposes a Lambda function handler for AWS API gateway proxy event triggers.",N,N],[11,"function_name","","Name of the Lambda function that is executing.",8,[[["self"]],["str"]]],[11,"function_version","","The Lambda function version that is executing. If an alias is used to invoke the function, then `function_version` will be the version the alias points to.",8,[[["self"]],["str"]]],[11,"invoked_function_arn","","The ARN used to invoke this function. It can be function ARN or alias ARN. An unqualified ARN executes the `$LATEST` version and aliases execute the function version it is pointing to.",8,[[["self"]],["str"]]],[11,"memory_limit_in_mb","","Memory limit, in MB, you configured for the Lambda function. You set the memory limit at the time you create a Lambda function and you can change it later.",8,[[["self"]],["str"]]],[11,"aws_request_id","","AWS request ID associated with the request. This is the ID returned to the client that called the invoke method.",8,[[["self"]],["str"]]],[11,"log_group_name","","The name of the CloudWatch log group where you can find logs written by your Lambda function.",8,[[["self"]],["str"]]],[11,"log_stream_name","","The name of the CloudWatch log stream where you can find logs written by your Lambda function. The log stream may or may not change for each invocation of the Lambda function.",8,[[["self"]],["str"]]],[11,"get_remaining_time_in_millis","","Returns the remaining execution time, in milliseconds, until AWS Lambda terminates the function.",8,[[["self"]],["result",["u64","contexterror"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"default","","",7,[[],["response"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",7,[[],["builder"]]],[11,"new","","Creates a new blank `Response` with the body",7,[[["t"]],["response"]]],[11,"from_parts","","Creates a new `Response` with the given head and body",7,[[["parts"],["t"]],["response"]]],[11,"status","","Returns the `StatusCode`.",7,[[["self"]],["statuscode"]]],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",7,[[["self"]],["statuscode"]]],[11,"version","","Returns a reference to the associated version.",7,[[["self"]],["version"]]],[11,"version_mut","","Returns a mutable reference to the associated version.",7,[[["self"]],["version"]]],[11,"headers","","Returns a reference to the associated header field map.",7,[[["self"]],["headermap"]]],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",7,[[["self"]],["headermap"]]],[11,"extensions","","Returns a reference to the associated extensions.",7,[[["self"]],["extensions"]]],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",7,[[["self"]],["extensions"]]],[11,"body","","Returns a reference to the associated HTTP body.",7,[[["self"]],["t"]]],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",7,[[["self"]],["t"]]],[11,"into_body","","Consumes the response, returning just the body.",7,[[["self"]],["t"]]],[11,"into_parts","","Consumes the response returning the head and body parts.",7,N],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",7,[[["self"],["f"]],["response"]]],[11,"into_response","","",7,[[["self"]],["response",["body"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into_response","","",0,[[["self"]],["response",["body"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"as_fail","","",1,[[["self"]],["fail"]]],[11,"to_owned","lando::request","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]]],"paths":[[4,"Body"],[4,"PayloadError"],[3,"RequestContext"],[3,"Identity"],[3,"StrMap"],[8,"RequestExt"],[8,"IntoResponse"],[3,"Response"],[3,"LambdaContext"]]};
initSearch(searchIndex);
